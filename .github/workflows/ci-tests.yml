name: "ci tests"

on:
  push:
    branches:
      - ci-pipeline-gh-runner
    paths-ignore:
      - "**.md"
  pull_request:
    paths-ignore:
      - "**.md"
  workflow_dispatch:
    inputs:
      test-macos-and-windows:
        description: "run macOS and Windows tests"
        required: true
        default: false
        type: boolean

env:
  # Not needed in CI, should make things a bit faster
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  # Build smaller artifacts to avoid running out of space in CI
  # TODO: Try to remove once https://github.com/paritytech/substrate/issues/11538 is resolved
  RUSTFLAGS: -C strip=symbols -C opt-level=s
  # Remove unnecessary WASM build artefacts
  WASM_BUILD_CLEAN_TARGET: 1

jobs:
  clippy-fmt-test:
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(github.repository_owner == 'subspace' && '[["self-hosted", "ubuntu-22.04-x86-64", "Linux"], ["self-hosted", "macos-12-arm64", "macOS"], ["self-hosted", "windows-server-2022-x86-64", "Windows"]]' || '["ubuntu-22.04", "macos-12", "windows-2022"]') }}
        run-all:
          - ${{ inputs.test-macos-and-windows == true || github.ref == 'refs/heads/main' }}
        exclude: # exclude macos-12 and windows-2022 when the condition is false
          - run-all: false
            os: macos-12
          - run-all: false
            os: windows-2022
          - run-all: false
            os: macOS
          - run-all: false
            os: Windows

    runs-on: ${{ matrix.os }}
    steps:
      - name: git checkout
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # @v3.1.0

      # On macOS, we need a proper Clang version, not Apple's custom version without wasm32 support
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@8852e4d5c58653ed05135c0a5d949d9c2febcb00 # v1.6.1
        with:
          version: "15.0"
        if: runner.os == 'macOS'

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      # Workaround to resolve link error with C:\msys64\mingw64\bin\libclang.dll
      - name: Remove msys64
        run: Remove-Item -LiteralPath "C:\msys64\" -Force -Recurse
        if: runner.os == 'Windows'

      # - name: Install latest nightly
      #   uses: actions-rs/toolchain@v1
      #   with:
      #       toolchain: nightly
      #       override: true
      #       components: rustfmt, clippy

      - name: cargo fmt
        run: cargo fmt --all -- --check

      - name: cargo test --locked
        run: cargo test

      - name: cargo clippy --locked
        run: cargo clippy --locked --all-targets -- -D warnings

      - name: Check Documentation
        run: cargo doc --locked --all --no-deps
        env:
          RUSTDOCFLAGS: "-D rustdoc::broken-intra-doc-links -D rustdoc::private_intra_doc_links"

      - name: Run cleanup script Linux
        if: contains(matrix.os, 'ubuntu-22.04-x86-64')
        run: echo "Cleaning up Linux self hosted environment"
        env:
          ACTIONS_RUNNER_HOOK_JOB_COMPLETED: "~/cleanup_script.sh"

      - name: Run cleanup script macOS
        if: contains(matrix.os, 'macos-12-arm64')
        run: echo "Cleaning up macOS self hosted environment"
        env:
          ACTIONS_RUNNER_HOOK_JOB_COMPLETED: "~/cleanup_script.sh"
        
      - name: Run cleanup script Windows
        if: contains(matrix.os, 'windows-server-2022-x86-64')
        run: echo "Cleaning up Windows self hosted environment"
        env:
          ACTIONS_RUNNER_HOOK_JOB_COMPLETED: "C:\\cleanup_script.ps1"
