[package]
name = "subspace-cli"
version = "0.3.0"
edition = "2021"

[dependencies]
bytesize = "1.1"
bytesize-serde = "0.2"
clap = { version = "4.1.1", features = ["derive"] }
color-eyre = "0.6.2"
derivative = "2.2.0"
dirs = "4.0.0"
fdlimit = "0.2"
futures = "0.3"
indicatif = { version = "0.17.1", features = ["improved_unicode"] }
libp2p-core = "0.38"
owo-colors = "3.5.0"
serde = "1"
serde_derive = "1"
single-instance = "0.3.3"
strum = "0.24.1"
strum_macros = "0.24.3"
thiserror = "1"
toml = "0.7"
tokio = { version = "1.27", features = ["macros", "rt-multi-thread", "tracing"] }
tracing = "0.1.37"
tracing-appender = "0.2"
tracing-bunyan-formatter = "0.3.4"
tracing-error = "0.2.0"
tracing-subscriber = { version = "0.3.16", features = ["env-filter"] }
whoami = "1"

subspace-sdk = { git = "https://github.com/subspace/subspace-sdk", rev = "fd2cdbb36d03653e82db11ec8213e09237bd3476" }

# The only triple tested and confirmed as working in `jemallocator` crate is `x86_64-unknown-linux-gnu`
[target.'cfg(all(target_arch = "x86_64", target_vendor = "unknown", target_os = "linux", target_env = "gnu"))'.dependencies]
jemallocator = "0.5.0"

[target.'cfg(tokio_unstable)'.dependencies]
console-subscriber = "0.1"

[patch.crates-io]
# TODO: remove once tracing-appender has a new release
tracing = { git = "https://github.com/tokio-rs/tracing", branch = "v0.1.x" }
tracing-appender = { git = "https://github.com/tokio-rs/tracing", branch = "v0.1.x" }
tracing-core = { git = "https://github.com/tokio-rs/tracing", branch = "v0.1.x" }
tracing-error = { git = "https://github.com/tokio-rs/tracing", branch = "v0.1.x" }
tracing-subscriber = { git = "https://github.com/tokio-rs/tracing", branch = "v0.1.x" }

[profile.production]
inherits = "release"
lto = "fat"
codegen-units = 1

# TODO: get rid of this when we have bigger RAM for aarch64 linux
[profile.aarch64linux]
inherits = "release"
codegen-units = 1

# The list of dependencies below (which can be both direct and indirect dependencies) are crates
# that are suspected to be CPU-intensive, and that are unlikely to require debugging (as some of
# their debug info might be missing) or to require to be frequently recompiled. We compile these
# dependencies with `opt-level=3` even in "dev" mode in order to make "dev" mode more usable.
# The majority of these crates are cryptographic libraries.
#
# This list is ordered alphabetically.
[profile.dev.package]
ark-bls12-381 = { opt-level = 3 }
ark-ec = { opt-level = 3 }
ark-ff = { opt-level = 3 }
ark-ff-asm = { opt-level = 3 }
ark-poly = { opt-level = 3 }
ark-serialize = { opt-level = 3 }
ark-std = { opt-level = 3 }
blake2 = { opt-level = 3 }
blake2b_simd = { opt-level = 3 }
chacha20poly1305 = { opt-level = 3 }
cranelift-codegen = { opt-level = 3 }
cranelift-wasm = { opt-level = 3 }
crc32fast = { opt-level = 3 }
crossbeam-deque = { opt-level = 3 }
crypto-mac = { opt-level = 3 }
curve25519-dalek = { opt-level = 3 }
ed25519-zebra = { opt-level = 3 }
flate2 = { opt-level = 3 }
futures-channel = { opt-level = 3 }
hashbrown = { opt-level = 3 }
hash-db = { opt-level = 3 }
hmac = { opt-level = 3 }
httparse = { opt-level = 3 }
integer-sqrt = { opt-level = 3 }
k256 = { opt-level = 3}
keccak = { opt-level = 3 }
libm = { opt-level = 3 }
libsecp256k1 = { opt-level = 3 }
libz-sys = { opt-level = 3 }
mio = { opt-level = 3 }
nalgebra = { opt-level = 3 }
num-bigint = { opt-level = 3 }
parking_lot = { opt-level = 3 }
parking_lot_core = { opt-level = 3 }
percent-encoding = { opt-level = 3 }
primitive-types = { opt-level = 3 }
ring = { opt-level = 3 }
rustls = { opt-level = 3 }
secp256k1 = { opt-level = 3 }
sha2 = { opt-level = 3 }
sha3 = { opt-level = 3 }
smallvec = { opt-level = 3 }
snow = { opt-level = 3 }
subspace-core-primitives = { opt-level = 3 }
subspace-archiving = { opt-level = 3 }
twox-hash = { opt-level = 3 }
uint = { opt-level = 3 }
wasmi = { opt-level = 3 }
x25519-dalek = { opt-level = 3 }
yamux = { opt-level = 3 }
zeroize = { opt-level = 3 }


# Reason: We need to patch substrate dependency of snowfork libraries to our fork
# TODO: Remove when we are using upstream substrate instead of fork
[patch."https://github.com/paritytech/substrate.git"]
frame-benchmarking = { version = "4.0.0-dev", git = "https://github.com/subspace/substrate", rev = "fdb68194ab6995447610b3dbdee70559711dbd63" }
frame-support = { version = "4.0.0-dev", git = "https://github.com/subspace/substrate", rev = "fdb68194ab6995447610b3dbdee70559711dbd63" }
frame-system = { version = "4.0.0-dev", git = "https://github.com/subspace/substrate", rev = "fdb68194ab6995447610b3dbdee70559711dbd63" }
sp-core = { version = "7.0.0", git = "https://github.com/subspace/substrate", rev = "fdb68194ab6995447610b3dbdee70559711dbd63" }
sp-std = { version = "5.0.0", git = "https://github.com/subspace/substrate", rev = "fdb68194ab6995447610b3dbdee70559711dbd63" }
sp-io = { version = "7.0.0", git = "https://github.com/subspace/substrate", rev = "fdb68194ab6995447610b3dbdee70559711dbd63" }
sp-runtime = { version = "7.0.0", git = "https://github.com/subspace/substrate", rev = "fdb68194ab6995447610b3dbdee70559711dbd63" }
