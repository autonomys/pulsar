name: "ci tests"

on:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
  pull_request:
    paths-ignore:
      - "**.md"
  workflow_dispatch:
    inputs:
      test-macos-and-windows:
        description: "run macOS and Windows tests"
        required: true
        default: false
        type: boolean

env:
  # Not needed in CI, should make things a bit faster
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  # Build smaller artifacts to avoid running out of space in CI
  # TODO: Try to remove once https://github.com/paritytech/substrate/issues/11538 is resolved
  RUSTFLAGS: -C strip=symbols -C opt-level=s
  # Remove unnecessary WASM build artefacts
  WASM_BUILD_CLEAN_TARGET: 1

jobs:
  clippy-fmt-test:
    strategy:
      fail-fast: false
      matrix:
        build:
          - os: ${{ fromJson(github.repository_owner == 'subspace' && '["self-hosted", "ubuntu-20.04-x86-64"]' || '"ubuntu-20.04"') }}
            target: x86_64-unknown-linux-gnu
            suffix: ubuntu-x86_64-skylake-${{ github.ref_name }}
            rustflags: "-C target-cpu=skylake"
          - os: ${{ fromJson(github.repository_owner == 'subspace' && '["self-hosted", "ubuntu-20.04-x86-64"]' || '"ubuntu-20.04"') }}
            target: x86_64-unknown-linux-gnu
            suffix: ubuntu-x86_64-v2-${{ github.ref_name }}
            rustflags: "-C target-cpu=x86-64-v2 -C target-feature=+aes"
          - os: ${{ fromJson(github.repository_owner == 'subspace' && '["self-hosted", "ubuntu-20.04-x86-64"]' || '"ubuntu-20.04"') }}
            target: aarch64-unknown-linux-gnu
            suffix: ubuntu-aarch64-${{ github.ref_name }}
            # TODO: AES flag is such that we have decent performance on ARMv8, remove once `aes` crate bumps MSRV to
            #  at least 1.61: https://github.com/RustCrypto/block-ciphers/issues/373
            rustflags: "-C linker=aarch64-linux-gnu-gcc --cfg aes_armv8"
          - os: ${{ fromJson(github.repository_owner == 'subspace' && '["self-hosted", "macos-12-arm64"]' || '"macos-12"') }}
            target: aarch64-apple-darwin
            suffix: macos-aarch64-${{ github.ref_name }}
            # TODO: AES flag is such that we have decent performance on ARMv8, remove once `aes` crate bumps MSRV to
            #  at least 1.61: https://github.com/RustCrypto/block-ciphers/issues/373
            rustflags: "--cfg aes_armv8"
          - os: ${{ fromJson(github.repository_owner == 'subspace' && '["self-hosted", "macos-12-arm64"]' || '"macos-12"') }}
            target: x86_64-apple-darwin
            suffix: macos-x86_64-${{ github.ref_name }}
            rustflags: ""
          - os: ${{ fromJson(github.repository_owner == 'subspace' && '["self-hosted", "windows-server-2022-x86-64"]' || '"windows-2022"') }}
            target: x86_64-pc-windows-msvc
            suffix: windows-x86_64-skylake-${{ github.ref_name }}
            rustflags: "-C target-cpu=skylake"
          - os: ${{ fromJson(github.repository_owner == 'subspace' && '["self-hosted", "windows-server-2022-x86-64"]' || '"windows-2022"') }}
            target: x86_64-pc-windows-msvc
            suffix: windows-x86_64-v2-${{ github.ref_name }}
            rustflags: "-C target-cpu=x86-64-v2 -C target-feature=+aes"
        run-all:
          - ${{ inputs.test-macos-and-windows == true || github.ref == 'refs/heads/main' }}
        exclude: # exclude macos-12 and windows-2022 when the condition is false
          - run-all: false
            os: macos-12
          - run-all: false
            os: windows-2022

    runs-on: ${{ matrix.build.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # @v3.1.0

      # On macOS, we need a proper Clang version, not Apple's custom version without wasm32 support
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@8852e4d5c58653ed05135c0a5d949d9c2febcb00 # v1.6.1
        with:
          version: "15.0"
        if: runner.os == 'macOS'

      - name: Install Protoc
        uses: arduino/setup-protoc@9b1ee5b22b0a3f1feb8c2ff99b32c89b3c3191e9 # v2.0.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      # Needed for hwloc
      - name: Install automake (macOS)
        run: brew install automake
        if: runner.os == 'macOS'

      # Workaround to resolve link error with C:\msys64\mingw64\bin\libclang.dll
      - name: Remove msys64
        run: Remove-Item -LiteralPath "C:\msys64\" -Force -Recurse
        if: runner.os == 'Windows'
        # May not exist on self-hosted runners
        continue-on-error: true

      - name: AArch64 cross-compile packages
        run: |
          FLAVOR="$(lsb_release -sc)"

          sudo tee /etc/apt/sources.list.d/arm64.list <<LIST
            deb [arch=arm64] http://ports.ubuntu.com/ ${FLAVOR} main restricted
            deb [arch=arm64] http://ports.ubuntu.com/ ${FLAVOR}-updates main restricted
            deb [arch=arm64] http://ports.ubuntu.com/ ${FLAVOR} universe
            deb [arch=arm64] http://ports.ubuntu.com/ ${FLAVOR}-updates universe
            deb [arch=arm64] http://ports.ubuntu.com/ ${FLAVOR} multiverse
            deb [arch=arm64] http://ports.ubuntu.com/ ${FLAVOR}-updates multiverse
            deb [arch=arm64] http://ports.ubuntu.com/ ${FLAVOR}-backports main restricted universe multiverse
          LIST
          sudo sed -i 's/deb http/deb [arch=amd64] http/' /etc/apt/sources.list
          # GitHub runners use mirror file
          sudo sed -i 's/deb mirror/deb [arch=amd64] mirror/' /etc/apt/sources.list

          sudo dpkg --add-architecture arm64
          sudo apt-get update
          # zlib1g-dev:arm64 is only necessary because amd64 version is present on the host and cross-compilation of
          # hwlocality-sys fails otherwise
          sudo apt-get install -y --no-install-recommends \
            g++-aarch64-linux-gnu \
            gcc-aarch64-linux-gnu \
            libc6-dev-arm64-cross \
            zlib1g-dev:arm64

          echo "PKG_CONFIG_ALLOW_CROSS=true" >> $GITHUB_ENV
        if: matrix.build.target == 'aarch64-unknown-linux-gnu'

      - name: cargo fmt
        uses: actions-rs/cargo@ae10961054e4aa8b4aa7dffede299aaf087aa33b # @v1.0.1
        with:
          command: fmt
          args: --all -- --check

      - name: cargo test --locked
        uses: actions-rs/cargo@ae10961054e4aa8b4aa7dffede299aaf087aa33b # @v1.0.1
        with:
          command: test

      - name: cargo clippy --locked
        uses: actions-rs/clippy-check@b5b5f21f4797c02da247df37026fcd0a5024aa4d # @v1.0.7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --locked --all-targets -- -D warnings

      - name: Check Documentation
        run: cargo doc --locked --all --no-deps
        env:
          RUSTDOCFLAGS: "-D rustdoc::broken-intra-doc-links -D rustdoc::private_intra_doc_links"
